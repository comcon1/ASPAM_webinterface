#!/usr/bin/python
from numpy import *
from matplotlib.pyplot import *
import pickle, time

from core import CPGoods, CombinedCurve, CPInitiator

import numpy.random as rnd

'''
The regime is set up by turning light off and on.
All timescales are in minutes.
'''
time_light_on = 9*3600
time_light_off = 21*3600


'''
Count of entering to the wheel is distributed normally [`cnt''].
The time of continuous rotation - same [``long'']
Numbers of rotations in the per-minute series - same [``rots''].
'''
class Nope:
    pass

night = Nope()
day = Nope()

night.mean_cnt = 10
night.std_cnt  = 4
night.mean_long = 3
night.std_long = 3
night.mean_rots = 12
night.std_rots = 7
night.size = 3600*24 - time_light_off + time_light_on

day.mean_cnt = 1
day.std_cnt = 0.5
day.mean_long = 3
day.std_long = 3
day.mean_rots = 3
day.std_rots = 1
day.size = time_light_off - time_light_on

def genPeriod(p):
    '''
    Generating night sequence. Enterances to the wheel are distributed uniformely
    over the total time interval.
    '''
    cnt = int(abs(rnd.normal(loc=p.mean_cnt, scale=p.std_cnt, size=1)[0]))
    data = zeros(p.size/60, dtype=np.uint8)
    data[:cnt] = 1
    rnd.shuffle(data)

    '''
    Fill minutes after every ``1'' positioned before.
    '''
    longs = array(abs(rnd.normal(loc=p.mean_long, scale=p.std_long, size=cnt)),\
            dtype=uint8)
    starts = nonzero(data)[0]
    c = 0
    for i in starts:
        print longs[c]
        _r = rnd.normal( loc=p.mean_rots, scale=p.std_rots, \
                size=min(p.size/60-i, longs[c]) )
        print _r.shape
        data[i:i+longs[c]] = array(abs(_r), dtype=uint8)
        c += 1
    
    xx = np.linspace(0,p.size, num=p.size/60, dtype=int32)
    yy = data
    ret = CPGoods([0,0],[xx[-1],0], vstack((xx,yy)).T, 0)
    return ret

init_t = time.mktime(time.strptime('16/07/2015 9','%d/%m/%Y %H'))

num_rats = 12
data = []
cc = None
for j in range(num_rats):
    cc = CombinedCurve()
    cc.pushCurve(CPInitiator(0, t= init_t, timestep=60 ))

    for i in range(7):
        gp = genPeriod(night if i % 2 else day)
        cc.pushCurve(gp)
    data.append(cc.data[:,1])
ddd = array(data, dtype=np.int32).T
print ddd.shape
ddd = vstack( (array(cc.data[:,0], dtype=np.int32), data) ).T
print ddd.shape

    


draw_rat = random.randint(1,num_rats-1)
print draw_rat
plot(ddd[:,0]/3600.-ddd[0,0]/3600., ddd[:,draw_rat])
show()
savetxt('try.it', ddd, fmt=['%11d'] + ['%4d']*num_rats, header='''\
Test sample generated by testsuite of libdaq
 timestamp%s''' % ( ''.join(map(lambda x: '  v%-2d' % (x+1) ,range(num_rats))) ))

sys.exit(0)
